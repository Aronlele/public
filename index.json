[{"content":"---\r\n\r\n![](/images/qixizhenailianbeijing.jpg)\r\n\r\n一首《往后余生》送给我家大宝贝，爱你一辈子哦！\r\n\r\n\u003caudio autoplay=\"autoplay\" controls=\"controls\"loop=\"loop\" preload=\"auto\"\r\n            src=\"/images/Track1.mp3\"\u003e\r\n      你的浏览器不支持audio标签\r\n\u003c/audio\u003e\r\n\r\n------\r\n\r\n写给老婆一首诗，爱你！嘻嘻，老婆老婆快亲亲我，😚😚\r\n\r\n\u003cdiv id = 'back' \u003e\r\n\r\n曾经\u003cbr\u003e\r\n\r\n一度沉迷\u003cbr\u003e\r\n\r\n迷失在 黑暗中\u003cbr\u003e\r\n\r\n期待有人把我唤醒\u003cbr\u003e\r\n\r\n无边的梦中\u003cbr\u003e\r\n\r\n浑浑噩噩\u003cbr\u003e\r\n\r\n杳无生机\u003cbr\u003e\r\n\r\n突然\u003cbr\u003e\r\n\r\n一点明亮\u003cbr\u003e\r\n\r\n打开了梦的一角\u003cbr\u003e\r\n\r\n释放\u003cbr\u003e\r\n\r\n不尽的光明\u003cbr\u003e\r\n\r\n我\u003cbr\u003e\r\n\r\n获得了重生\u003cbr\u003e\r\n\r\n今生遇见\u003cbr\u003e\r\n\r\n不负余生\u003cbr\u003e\r\n\r\n\u003c/div\u003e\r\n\r\n\u003cstyle\u003e \r\n\r\n#back{ \r\n\r\nwidth：800px;  \r\n\r\nheight:1200px;  \r\n\r\nbackground:url('/images/77.jpg')no-repeat;\r\n\r\ntext-align:center  } \r\n\r\n\u003c/style\u003e \r\n\r\n------\r\n\r\n-------------------------------------------------------------------------------------------**余生很长，我们一起走过**","cover":"/images/qixizhenailianbeijing.jpg","link":"77.html","preview":"\u003cp\u003e七夕节来了，老婆，七夕节快乐，爱你，爱你，😘\u003c/p\u003e\n","title":"七夕佳节，以此篇文章，送给我的挚爱"},{"content":"---\r\n\r\n### 这几个月发现了Google Chrome Devtools的易用性非常高的小功能和小细节 特意分享给大家、\r\n\r\n## **Element**\r\n\r\n\r\n\r\n### **1. styles内 悬浮样式名可以高亮符合样式名的所有元素（如图）**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3ojEYBnJcf38uwmnS0lSpniaYlzkGUG0JzQtalYYkIGaZjJLU8rGciaoKw/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n这个功能还是比较有用的，适用于查看自己写的样式到底用在了哪些元素上，方便看到样式是否起冲突。\r\n\r\n\r\n\r\n### **2. 快速调节样式的数值（如图）**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3oiadyg13m1CKML4YYmnjh4SRjTHVGoqD6ofted6n8icbU45rDMNcRjc6w/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\ntip：方向上下键就可以调整样式数值 再也不用靠猜了\r\n\r\n\r\n\r\n### **3. 对于字体颜色，背景颜色等需要用到色值的，可以直接在控制台进行取色或编辑（如图）**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3owzM8tPwVH5o36Kyb5LC3IiaiaHguBDDrCWYhnlgjPnpYXoFxPyK9G2kQ/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n这个不仅可以手动取色，还可以再次取网页内其他元素的颜色\r\n\r\n###  \r\n\r\n### **4. 用工具模拟css系列操作（如图）**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3oUjrdQgspGb5VQtNxdv9sovNicicibcm7C1xMLdFWNgfh8HTh54u7LXzvQ/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n这个比较有意思...有些鼠标悬浮的样式，鼠标移出就没有了。对于解决无法停留保存样式的问题，这样做还是很简单的，而且便于操控。\r\n\r\n\r\n\r\n### **5. 图形化CSS动画编写（如图）**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3oicdoBicibz86tW2DGZTRZuXnJMR2uL1Ml0GzPibuEaHiciasb5pGdn3e3qsA/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n这个我具体没用过哈....因为很少写动画....但是看起来可以图形化调整运动曲线，比较有意思\r\n\r\n\r\n\r\n### **6. CSS阴影图形化编写**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3oeo3FhJJfLwL7Z5GhJibkmMj45ZHE2tv4PuTiaeaza94IJbehJQiauKQ9Q/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n这个可以图形化调整阴影的XY偏移度，模糊程度，扩散程度\r\n\r\n\r\n\r\n### **7. 快速查看选中元素的信息（如图）**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3o6b8Bq1VZMdxx90rGGv6WnCb0B5Ibk3IbI9YVGFjOichHZyvmb0siaAhA/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n这个有点意思，之前大家在做一些业务时，不少情况下需要console.log一下元素。看看他的属性。还可以看到选中元素的子元素，高度等等\r\n\r\n\r\n\r\n## **Console**\r\n\r\n\r\n\r\n### **1. 输出内容过滤器**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3oWSWhQAjayvLO5BWiba86vE2PvkK4qmLw8Zsk68Ux4AWW5mtxwgaaXqA/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n这个可以快速输入关键字 查找你想要的console是否支持正则自测\r\n\r\n### \r\n\r\n### **2. Console优先级筛选**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3oibD88kSObKnkxrpiaMB3ePUr7NkIEiceNO2ot8YT9A7WibdNve9MeFomiag/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n这个可以快速筛选console的优先级，看到你想看到的调试信息\r\n\r\n\r\n\r\n### **3. Console内的其他工具**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3oaBkvqRZQXyxoRtKgdn0Qd7gtzTESmiaSBHICyDh3gM3wn2iaa4l2GkqA/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n这里面包含了“调试信息带时间戳”“显示XMLHttpRequests请求情况”等等，请自测\r\n\r\n\r\n\r\n## **Network**\r\n\r\n###  \r\n\r\n### **技巧**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3ozzviaibJ2Y9ZicoR0xD53tLIGHX1at7jUiaFLnfS1zpgYP1RElCLU9zibicw/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n这里面包含了“隐藏data开头的小图片链接”，“开启离线模式”，“对页面限速限制延迟”等一系列功能\r\n\r\n\r\n\r\n## **Vue DevTools（其他框架开发者请略过）**\r\n\r\n\r\n\r\n### **1. 快速定位组件的相对定位位置和dom树位置（如图）**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3oyymA19jmtwBvSwqZDScrBl9qEiceEFuAkibLpUicN7ibKI1JqpNbHX9TAA/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n### **2. 快速查看元素的组件名 并定位组件树位置**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3ouFDgAtfR0aTHvJKsxLCZlKDTib2k3oOYpwiaLbfWLAt0tR3LBhcIlpsA/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n### **Security**\r\n\r\n\r\n\r\n可以看到页面加载以来所有请求的domain（不是hosts更正一下）\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3oViciadOBTejWYpY0SfEOiaITRZRHKmKQicYmafg31Kcmic8Ut4EYYOPvklg/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n## **更多工具**\r\n\r\n\r\n\r\n请如图寻找 我要开始了咳咳\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3otwOzVGzbXsI4AS7fo7U9GKHoV0UrEkbGxGIGDjGR6SChSo6l6UTapQ/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n## **Animations**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3oZJTwiaZQmD8q6DYQsL47xYLewsZHHgmqrsae4CibjW5eicicykjTAT0Ubw/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n打开这个组件，触发页面动画后会出现如图上。\r\n\r\n可以控制动画速度，拦截动画播放，手动拉动动画进行慢速播放。\r\n\r\n\r\n\r\n## **Change**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3oNGjx1IKhIIhAnIs7kdib8aSsCZT5Yb5SmJ2Prbnnbo0WqY4zicRIfm6w/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n这个非常有用啊啊啊啊啊啊啊。尤其是你在页面修改css后，回过头就忘记修改了哪一些......这个工具可以看到页面加载以来所有你的临时手动修改\r\n\r\n\r\n\r\n## **Network conditions**\r\n\r\n\r\n\r\n### **1. 基本操作（功能如图）**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3oVHEfEjRmkk3Z4ju1wwXkdQUHdSneDzDV01UrGS1Cm9Y2BXrTJIcBJg/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n\r\n\r\n### **2. 对页面进行限流（使用系统预设）**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3omdAFlmCIRkLGxBxqQ3s3fBs2Zia8gdZsibPU9saficZmgAKpM336dNbsw/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n### **3. 对页面进行限流（使用自定义）**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3ob6DKXWicxLMHfo6gib4dES9V6GheocSR4FhTZ1wBiaosibtoA11ZvnjouQ/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n点击上一张图的 \"Add\" 后，点击本章图的“Add custom profile”就会出现上图的情况 根据实际情况调整~~\r\n\r\n\r\n\r\n## **Quick source**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3otex2iaERHKLmDDTWwFab0kxUgGY8ZWhq0Oc5YodBCXCK92xFiadGzkxA/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n在这里面写代码 边写边生效\r\n\r\n\r\n\r\n## **Rendering**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3oiagabXdpuybYcA8HsFOiclcZSvuNPqqzv4dKibiaQMahoZfAaDXATHCDsA/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n这里是各种监视器的地方，包括fps帧率监视器。\r\n\r\n做HTML5/移动端游戏开发必备~~可以实时看到FPS，GPU的Memory占用~~\r\n\r\n\r\n\r\n## **Search**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3oecIXS8ibI5dSc1ruiaWpfX49GvOKZ2joeWQnzRYXJM22BghUYf28gLOw/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n输入内容，全局搜索（所有加载的文件内容）\r\n\r\n\r\n\r\n## **Sensors**\r\n\r\n\r\n\r\n![img](https://mmbiz.qpic.cn/mmbiz_png/53hxia5OmNYL9k99CNVIcFhh3WXCJJQ3oChUTlI0sFicibka86ibUQbXmblmndfLjicenU29QArwJcEI0HoPMHxpz8g/640?wx_fmt=png\u0026tp=webp\u0026wxfrom=5\u0026wx_lazy=1)\r\n\r\n\r\n\r\n这个可以模拟当前设备的位置，还可以模拟手机水平传感器参数。只需要拖动图中的手机就好","cover":"","link":"dev.html","preview":"","title":"前端神器—Google Chrome Devtools细节详解"},{"content":"---\r\n\r\n\r\n\r\n\u003e 本文是为 大渝网 (http://cq.qq.com) `API` 开发规范拟定的一个 `beta` 版，文章大量参考了目前比较常见的 `RESTfulAPI` 设计。\r\n\r\n为了更好的讨论规范带来的争议及问题，现已把该文档整理并开源到 github (https://github.com/godruoyi/restful-api-specification)，关于大家补充及提 issue。\r\n\r\n#### 关于「能愿动词」的使用\r\n\r\n为了避免歧义，文档大量使用了“能愿动词”，对应的解释如下：\r\n\r\n- `必须(MUST)`：绝对，严格遵循，请照做，无条件遵守；\r\n- `一定不可(MUST NOT)`：禁令，严令禁止；\r\n- `应该(SHOULD)` ：强烈建议这样做，但是不强求；\r\n- `不该(SHOULD NOT)`：强烈不建议这样做，但是不强求；\r\n- `可以(MAY)` 和 `可选(OPTIONAL)` ：选择性高一点，在这个文档内，此词语使用较少；\r\n\r\n\u003e 参见：RFC 2119 (http://www.ietf.org/rfc/rfc2119.txt)\r\n\r\n#### 协议\r\n\r\n在通过 `API` 于后端服务通信的过程中， `应该` 使用 `HTTPS` 协议。\r\n\r\n#### API Root URL\r\n\r\n`API` 的根入口点应尽可能保持足够简单，这里有两个常见的 `URL` 根例子：\r\n\r\n- api.example.com/*\r\n- example.com/api/*\r\n\r\n\u003e 如果你的应用很庞大或者你预计它将会变的很庞大，那 `应该` 将 `API` 放到子域下。这种做法可以保持某些规模化上的灵活性。\r\n\r\n#### Versioning\r\n\r\n所有的 `API` 必须保持向后兼容，你 `必须` 在引入新版本 `API` 的同时确保旧版本 `API` 仍然可用。所以 `应该`为其提供版本支持。\r\n\r\n目前比较常见的两种版本号形式：\r\n\r\n##### 在 URL 中嵌入版本编号\r\n\r\n```\r\napi.example.com/v1/*\r\n```\r\n\r\n这种做法是版本号直观、易于调试；另一种做法是，将版本号放在 `HTTPHeader` 头中：\r\n\r\n##### 通过媒体类型来指定版本信息\r\n\r\n```\r\nAccept: application/vnd.example.com.v1+json\r\n```\r\n\r\n其中 `vnd` 表示 `StandardsTree` 标准树类型，有三个不同的树： `x`， `prs` 和 `vnd`。你使用的标准树需要取决于你开发的项目。\r\n\r\n- 未注册的树（ `x`）主要表示本地和私有环境\r\n- 私有树（ `prs`）主要表示没有商业发布的项目\r\n- 供应商树（ `vnd`）主要表示公开发布的项目\r\n\r\n\u003e 后面几个参数依次为应用名称（一般为应用域名）、版本号、期望的返回格式。\r\n\r\n至于具体把版本号放在什么地方，这个问题一直存在很大的争议，但由于我们大多数时间都在使用 `Laravel` 开发， `应该` 使用 dingo/api 来快速构建应用，它采用第二种方式来管理 `API` 版本，并且已集成了标准的 `HTTPResponse`。\r\n\r\n#### Endpoints\r\n\r\n端点就是指向特定资源或资源集合的 `URL`。在端点的设计中，你 `必须` 遵守下列约定：\r\n\r\n- URL 的命名 `必须` 全部小写\r\n- URL 中资源（ `resource`）的命名 `必须` 是名词，并且 `必须` 是复数形式\r\n- `必须` 优先使用 `Restful` 类型的 URL\r\n- URL 中不能出现 `-`， `必须` 用下划线 `_` 代替\r\n- URL `必须` 是易读的\r\n- URL `一定不可` 暴露服务器架构\r\n\r\n来看一个反例：\r\n\r\n- https://api.example.com/getUserInfo?userid=1\r\n- https://api.example.com/getusers\r\n- https://api.example.com/sv/u\r\n- https://api.example.com/cgi-bin/users/get_user.php?userid=1\r\n\r\n再来看一个正例：\r\n\r\n- https://api.example.com/zoos\r\n- https://api.example.com/animals\r\n- https://api.example.com/zoos/{zoo}/animals\r\n- https://api.example.com/animal_types\r\n- https://api.example.com/employees\r\n\r\n#### HTTP 动词\r\n\r\n对于资源的具体操作类型，由 `HTTP` 动词表示。常用的 `HTTP` 动词有下面五个（括号里是对应的 `SQL` 命令）。\r\n\r\n- GET（SELECT）：从服务器取出资源（一项或多项）。\r\n- POST（CREATE）：在服务器新建一个资源。\r\n- PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。\r\n- PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。\r\n- DELETE（DELETE）：从服务器删除资源。\r\n\r\n其中：\r\n\r\n1. 删除资源 `必须` 用 `DELETE` 方法。\r\n2. 创建新的资源 `必须` 使用 `POST` 方法。\r\n3. 更新资源 `应该` 使用 `PUT` 方法。\r\n4. 获取资源信息 `必须` 使用 `GET` 方法。\r\n\r\n针对每一个端点来说，下面列出所有可行的 `HTTP` 动词和端点的组合：\r\n\r\n| 请求方法 | URL                              | 描述                                             |\r\n| -------- | -------------------------------- | ------------------------------------------------ |\r\n| GET      | /zoos                            | 列出所有的动物园(ID和名称，不要太详细)           |\r\n| POST     | /zoos                            | 新增一个新的动物园                               |\r\n| GET      | /zoos/{zoo}                      | 获取指定动物园详情                               |\r\n| PUT      | /zoos/{zoo}                      | 更新指定动物园(整个对象)                         |\r\n| PATCH    | /zoos/{zoo}                      | 更新动物园(部分对象)                             |\r\n| DELETE   | /zoos/{zoo}                      | 删除指定动物园                                   |\r\n| GET      | /zoos/{zoo}/animals              | 检索指定动物园下的动物列表(ID和名称，不要太详细) |\r\n| GET      | /animals                         | 列出所有动物(ID和名称)。                         |\r\n| POST     | /animals                         | 新增新的动物                                     |\r\n| GET      | /animals/{animal}                | 获取指定的动物详情                               |\r\n| PUT      | /animals/{animal}                | 更新指定的动物(整个对象)                         |\r\n| PATCH    | /animals/{animal}                | 更新指定的动物(部分对象)                         |\r\n| GET      | /animal_types                    | 获取所有动物类型(ID和名称，不要太详细)           |\r\n| GET      | /animal_types/{type}             | 获取指定的动物类型详情                           |\r\n| GET      | /employees                       | 检索整个雇员列表                                 |\r\n| GET      | /employees/{employee}            | 检索指定特定的员工                               |\r\n| GET      | /zoos/{zoo}/employees            | 检索在这个动物园工作的雇员的名单(身份证和姓名)   |\r\n| POST     | /employees                       | 新增指定新员工                                   |\r\n| POST     | /zoos/{zoo}/employees            | 在特定的动物园雇佣一名员工                       |\r\n| DELETE   | /zoos/{zoo}/employees/{employee} | 从某个动物园解雇一名员工                         |\r\n\r\n#### Filtering\r\n\r\n\u003e 如果记录数量很多，服务器不可能都将它们返回给用户。API `应该` 提供参数，过滤返回结果。下面是一些常见的参数。\r\n\r\n- ?limit=10：指定返回记录的数量。\r\n- ?offset=10：指定返回记录的开始位置。\r\n- ?page=2\u0026per_page=100：指定第几页，以及每页的记录数。\r\n- ?sortby=name\u0026order=asc：指定返回结果按照哪个属性排序，以及排序顺序。\r\n- ?animaltypeid=1：指定筛选条件。\r\n\r\n所有 `URL` 参数 `必须` 是全小写， `必须` 使用下划线类型的参数形式。\r\n\r\n经常使用的、复杂的查询 `应该` 标签化，降低维护成本。如\r\n\r\n```\r\nGET /trades?status=closed\u0026sort=sortby=name\u0026order=asc# 可为其定制快捷方式GET /trades/recently_closed\r\n```\r\n\r\n#### Authentication\r\n\r\n`应该` 使用 `OAuth2.0` 的方式为 API 调用者提供登录认证。 `必须` 先通过登录接口获取 `AccessToken` 后再通过该 `token` 调用需要身份认证的 `API`。\r\n\r\nOauth 的端点设计示列：\r\n\r\n- RFC 6749 /token\r\n- Twitter /oauth2/token\r\n- Fackbook /oauth/access_token\r\n- Google /o/oauth2/token\r\n- Github /login/oauth/access_token\r\n- Instagram /oauth/authorize\r\n\r\n客户端在获得 `access token` 的同时 `必须` 在响应中包含一个名为 `expires_in` 的数据，它表示当前获得的 `token` 会在多少 `秒` 后失效。\r\n\r\n```\r\n{    \"access_token\": \"token....\",    \"token_type\": \"Bearer\",    \"expires_in\": 3600}\r\n```\r\n\r\n客户端在请求需要认证的 `API` 时， `必须` 在请求头 `Authorization` 中带上 `access_token`。\r\n\r\n```\r\nAuthorization: Bearer token...\r\n```\r\n\r\n当超过指定的秒数后， `access token` 就会过期，再次用过期/或无效的 `token` 访问时，服务端 `应该` 返回 `invalid_token` 的错误或 `401` 错误码。\r\n\r\n```\r\nHTTP/1.1 401 UnauthorizedContent-Type: application/jsonCache-Control: no-storePragma: no-cache{    \"error\": \"invalid_token\"}\r\n```\r\n\r\n\u003e Laravel 开发中， `应该` 使用 JWT 来为管理你的 Token，并且 `一定不可` 在 `api` 中间件中开启请求 `session`。\r\n\r\n#### Response\r\n\r\n所有的 `API` 响应， `必须` 遵守 `HTTP` 设计规范， `必须` 选择合适的 `HTTP` 状态码。 `一定不可`所有接口都返回状态码为 `200` 的 `HTTP` 响应，如：\r\n\r\n```\r\nHTTP/1.1 200 okContent-Type: application/jsonServer: example.com{    \"code\": 0,    \"msg\": \"success\",    \"data\": {        \"username\": \"username\"    }}\r\n```\r\n\r\n或\r\n\r\n```\r\nHTTP/1.1 200 okContent-Type: application/jsonServer: example.com{    \"code\": -1,    \"msg\": \"该活动不存在\",}\r\n```\r\n\r\n下表列举了常见的 `HTTP` 状态码：\r\n\r\n| 状态码 | 描述                                                 |\r\n| ------ | ---------------------------------------------------- |\r\n| 1xx    | 代表请求已被接受，需要继续处理                       |\r\n| 2xx    | 请求已成功，请求所希望的响应头或数据体将随此响应返回 |\r\n| 3xx    | 重定向                                               |\r\n| 4xx    | 客户端原因引起的错误                                 |\r\n| 5xx    | 服务端原因引起的错误                                 |\r\n\r\n\u003e 只有来自客户端的请求被正确的处理后才能返回 `2xx` 的响应，所以当 API 返回 `2xx` 类型的状态码时，前端 `必须`认定该请求已处理成功。\r\n\r\n必须强调的是，所有 `API` `一定不可` 返回 `1xx` 类型的状态码。当 `API` 发生错误时， `必须` 返回出错时的详细信息。目前常见返回错误信息的方法有两种：\r\n\r\n1、将错误详细放入 `HTTP` 响应首部：\r\n\r\n```\r\nX-MYNAME-ERROR-CODE: 4001X-MYNAME-ERROR-MESSAGE: Bad authentication tokenX-MYNAME-ERROR-INFO: http://docs.example.com/api/v1/authentication\r\n```\r\n\r\n2、直接放入响应实体中：\r\n\r\n```\r\nHTTP/1.1 401 UnauthorizedServer: nginx/1.11.9Content-Type: application/jsonTransfer-Encoding: chunkedCache-Control: no-cache, privateDate: Sun, 24 Jun 2018 10:02:59 GMTConnection: keep-alive{\"error_code\":40100,\"message\":\"Unauthorized\"}\r\n```\r\n\r\n考虑到易读性和客户端的易处理性，我们 `必须` 把错误信息直接放到响应实体中，并且错误格式 `应该` 满足如下格式：\r\n\r\n```\r\n{    \"message\": \"您查找的资源不存在\",    \"error_code\": 404001}\r\n```\r\n\r\n其中错误码（ `error_code`） `必须` 和 `HTTP` 状态码对应，也方便错误码归类，如：\r\n\r\n```\r\nHTTP/1.1 429 Too Many RequestsServer: nginx/1.11.9Content-Type: application/jsonTransfer-Encoding: chunkedCache-Control: no-cache, privateDate: Sun, 24 Jun 2018 10:15:52 GMTConnection: keep-alive{\"error_code\":429001,\"message\":\"你操作太频繁了\"}\r\n```\r\n\r\n```\r\nHTTP/1.1 403 ForbiddenServer: nginx/1.11.9Content-Type: application/jsonTransfer-Encoding: chunkedCache-Control: no-cache, privateDate: Sun, 24 Jun 2018 10:19:27 GMTConnection: keep-alive{\"error_code\":403002,\"message\":\"用户已禁用\"}\r\n```\r\n\r\n`应该` 在返回的错误信息中，同时包含面向开发者和面向用户的提示信息，前者可方便开发人员调试，后者可直接展示给终端用户查看如：\r\n\r\n```\r\n{    \"message\": \"直接展示给终端用户的错误信息\",    \"error_code\": \"业务错误码\",    \"error\": \"供开发者查看的错误信息\",    \"debug\": [        \"错误堆栈，必须开启 debug 才存在\"    ]}\r\n```\r\n\r\n下面详细列举了各种情况 API 的返回说明。\r\n\r\n##### 200 ok\r\n\r\n`200` 状态码是最常见的 `HTTP` 状态码，在所有 **成功** 的 `GET` 请求中， `必须` 返回此状态码。 `HTTP` 响应实体部分 `必须` 直接就是数据，不要做多余的包装。\r\n\r\n错误示例：\r\n\r\n```\r\nHTTP/1.1 200 okContent-Type: application/jsonServer: example.com{    \"user\": {        \"id\":1,        \"nickname\":\"fwest\",        \"username\": \"example\"    }}\r\n```\r\n\r\n正确示例：\r\n\r\n**1、获取单个资源详情**\r\n\r\n```\r\n{    \"id\": 1,    \"username\": \"godruoyi\",    \"age\": 88,}\r\n```\r\n\r\n**2、获取资源集合**\r\n\r\n```\r\n[    {        \"id\": 1,        \"username\": \"godruoyi\",        \"age\": 88,    },    {        \"id\": 2,        \"username\": \"foo\",        \"age\": 88,    }]\r\n```\r\n\r\n**3、额外的媒体信息**\r\n\r\n```\r\n{    \"data\": [        {            \"id\": 1,            \"avatar\": \"https://lorempixel.com/640/480/?32556\",            \"nickname\": \"fwest\",            \"last_logined_time\": \"2018-05-29 04:56:43\",            \"has_registed\": true        },        {            \"id\": 2,            \"avatar\": \"https://lorempixel.com/640/480/?86144\",            \"nickname\": \"zschowalter\",            \"last_logined_time\": \"2018-06-16 15:18:34\",            \"has_registed\": true        }    ],    \"meta\": {        \"pagination\": {            \"total\": 101,            \"count\": 2,            \"per_page\": 2,            \"current_page\": 1,            \"total_pages\": 51,            \"links\": {                \"next\": \"http://api.example.com?page=2\"            }        }    }}\r\n```\r\n\r\n\u003e 其中，分页和其他额外的媒体信息，必须放到 `meta` 字段中。\r\n\r\n##### 201 Created\r\n\r\n当服务器创建数据成功时， `应该` 返回此状态码。常见的应用场景是使用 `POST` 提交用户信息，如：\r\n\r\n- 添加了新用户\r\n- 上传了图片\r\n- 创建了新活动\r\n\r\n等，都可以返回 `201` 状态码。需要注意的是，你可以选择在用户创建成功后返回新用户的数据：\r\n\r\n```\r\nHTTP/1.1 201 CreatedServer: nginx/1.11.9Content-Type: application/jsonTransfer-Encoding: chunkedDate: Sun, 24 Jun 2018 09:13:40 GMTConnection: keep-alive{    \"id\": 1,    \"avatar\": \"https://lorempixel.com/640/480/?32556\",    \"nickname\": \"fwest\",    \"last_logined_time\": \"2018-05-29 04:56:43\",    \"created_at\": \"2018-06-16 17:55:55\",    \"updated_at\": \"2018-06-16 17:55:55\"}\r\n```\r\n\r\n也可以返回一个响应实体为空的 `HTTPResponse` 如：\r\n\r\n```\r\nHTTP/1.1 201 CreatedServer: nginx/1.11.9Content-Type: text/html; charset=UTF-8Transfer-Encoding: chunkedDate: Sun, 24 Jun 2018 09:12:20 GMTConnection: keep-alive\r\n```\r\n\r\n\u003e 这里我们 `应该` 采用第二种方式，因为大多数情况下，客户端只需要知道该请求操作成功与否，并不需要返回新资源的信息。\r\n\r\n##### 202 Accepted\r\n\r\n该状态码表示服务器已经接受到了来自客户端的请求，但还未开始处理。常用短信发送、邮件通知、模板消息推送等这类很耗时需要队列支持的场景中。\r\n\r\n\u003e 返回该状态码时，响应实体 `必须` 为空。\r\n\r\n```\r\nHTTP/1.1 202 AcceptedServer: nginx/1.11.9Content-Type: text/html; charset=UTF-8Transfer-Encoding: chunkedDate: Sun, 24 Jun 2018 09:25:15 GMTConnection: keep-alive\r\n```\r\n\r\n##### 204 No Content\r\n\r\n该状态码表示响应实体不包含任何数据，其中：\r\n\r\n- 在使用 `DELETE` 方法删除资源 **成功** 时， `必须` 返回该状态码\r\n- 使用 `PUT`、 `PATCH` 方法更新数据 **成功** 时，也 `应该` 返回此状态码\r\n\r\n```\r\nHTTP/1.1 204 No ContentServer: nginx/1.11.9Date: Sun, 24 Jun 2018 09:29:12 GMTConnection: keep-alive\r\n```\r\n\r\n##### 3xx 重定向\r\n\r\n所有 `API` `一定不可` 返回 `3xx` 类型的状态码。因为 `3xx` 类型的响应格式一般为下列格式：\r\n\r\n```\r\nHTTP/1.1 302 FoundServer: nginx/1.11.9Content-Type: text/html; charset=UTF-8Transfer-Encoding: chunkedCache-Control: no-cache, privateDate: Sun, 24 Jun 2018 09:41:50 GMTLocation: https://example.comConnection: keep-alive\u003c!DOCTYPE html\u003e\u003chtml\u003e    \u003chead\u003e        \u003cmeta charset=\"UTF-8\" /\u003e        \u003cmeta http-equiv=\"refresh\" content=\"0;url=https://example.com\" /\u003e        \u003ctitle\u003eRedirecting to https://example.com\u003c/title\u003e    \u003c/head\u003e    \u003cbody\u003e        Redirecting to \u003ca href=\"https://example.com\"\u003ehttps://example.com\u003c/a\u003e.    \u003c/body\u003e\u003c/html\u003e\r\n```\r\n\r\n`API` `一定不可` 返回纯 `HTML` 结构的响应；若一定要使用重定向功能， `应该` 返回一个响应实体为空的 `3xx` 响应，并在响应头中加上 `Location` 字段：\r\n\r\n```\r\nHTTP/1.1 302 FoundServer: nginx/1.11.9Content-Type: text/html; charset=UTF-8Transfer-Encoding: chunkedDate: Sun, 24 Jun 2018 09:52:50 GMTLocation: https://godruoyi.comConnection: keep-alive\r\n```\r\n\r\n##### 400 Bad Request\r\n\r\n由于明显的客户端错误（例如，请求语法格式错误、无效的请求、无效的签名等），服务器 `应该` 放弃该请求。\r\n\r\n\u003e 当服务器无法从其他 4xx 类型的状态码中找出合适的来表示错误类型时，都 `必须` 返回该状态码。\r\n\r\n```\r\nHTTP/1.1 400 Bad RequestServer: nginx/1.11.9Content-Type: application/jsonTransfer-Encoding: chunkedCache-Control: no-cache, privateDate: Sun, 24 Jun 2018 13:22:36 GMTConnection: keep-alive{\"error_code\":40000,\"message\":\"无效的签名\"}\r\n```\r\n\r\n##### 401 Unauthorized\r\n\r\n该状态码表示当前请求需要身份认证，以下情况都 `必须` 返回该状态码。\r\n\r\n- 未认证用户访问需要认证的 API\r\n- access_token 无效/过期\r\n\r\n\u003e 客户端在收到 `401` 响应后，都 `应该` 提示用户进行下一步的登录操作。\r\n\r\n```\r\nHTTP/1.1 401 UnauthorizedServer: nginx/1.11.9Content-Type: application/jsonTransfer-Encoding: chunkedWWW-Authenticate: JWTAuthCache-Control: no-cache, privateDate: Sun, 24 Jun 2018 13:17:02 GMTConnection: keep-alive\"message\":\"Token Signature could not be verified.\",\"error_code\": \"40100\"}\r\n```\r\n\r\n##### 403 Forbidden\r\n\r\n该状态码可以简单的理解为没有权限访问该请求，服务器收到请求但拒绝提供服务。\r\n\r\n如当普通用户请求操作管理员用户时， `必须` 返回该状态码。\r\n\r\n```\r\nHTTP/1.1 403 ForbiddenServer: nginx/1.11.9Content-Type: application/jsonTransfer-Encoding: chunkedCache-Control: no-cache, privateDate: Sun, 24 Jun 2018 13:05:34 GMTConnection: keep-alive{\"error_code\":40301,\"message\":\"权限不足\"}\r\n```\r\n\r\n##### 404 Not Found\r\n\r\n该状态码表示用户请求的资源不存在，如：\r\n\r\n- 获取不存在的用户信息 （get /users/9999999）\r\n- 访问不存在的端点\r\n\r\n都 `必须` 返回该状态码，若该资源已永久不存在，则 `应该` 返回 `401` 响应。\r\n\r\n##### 405 Method Not Allowd\r\n\r\n当客户端使用的 `HTTP` 请求方法不被服务器允许时， `必须` 返回该状态码。\r\n\r\n\u003e 如客户端调用了 `POST` 方法来访问只支持 GET 方法的 API。\r\n\r\n该响应 `必须` 返回一个 `Allow` 头信息用以表示出当前资源能够接受的请求方法的列表。\r\n\r\n```\r\nHTTP/1.1 405 Method Not AllowedServer: nginx/1.11.9Content-Type: application/jsonTransfer-Encoding: chunkedAllow: GET, HEADCache-Control: no-cache, privateDate: Sun, 24 Jun 2018 12:30:57 GMTConnection: keep-alive{\"message\":\"405 Method Not Allowed\",\"error_code\": 40500}\r\n```\r\n\r\n##### 406 Not Acceptable\r\n\r\n`API` 在不支持客户端指定的数据格式时，应该返回此状态码。如支持 `JSON` 和 `XML` 输出的 `API` 被指定返回 `YAML` 格式的数据时。\r\n\r\n\u003e Http 协议一般通过请求首部的 Accept 来指定数据格式。\r\n\r\n##### 408 Request Timeout\r\n\r\n客户端请求超时时 `必须` 返回该状态码，需要注意的时，该状态码表示 **客户端请求超时**，在涉及第三方 `API`调用超时时， `一定不可` 返回该状态码。\r\n\r\n##### 409 Gonfilct\r\n\r\n该状态码表示因为请求存在冲突无法处理。如通过手机号码提供注册功能的 `API`，当用户提交的手机号已存在时， `必须` 返回此状态码。\r\n\r\n```\r\nHTTP/1.1 409 ConflictServer: nginx/1.11.9Content-Type: application/jsonTransfer-Encoding: chunkedCache-Control: no-cache, privateDate: Sun, 24 Jun 2018 12:19:04 GMTConnection: keep-alive{\"error_code\":40900,\"message\":\"手机号已存在\"}\r\n```\r\n\r\n##### 410 Gone\r\n\r\n和 `404` 类似，该状态码也表示请求的资源不存在，只是 `410` 状态码进一步表示所请求的资源已不存在，并且未来也不会存在。在收到 `410` 状态码后，客户端 `应该` 停止再次请求该资源。\r\n\r\n##### 413 Request Entity Too Large\r\n\r\n该状态码表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。\r\n\r\n\u003e 此种情况下，服务器可以关闭连接以免客户端继续发送此请求。\r\n\r\n如果这个状况是临时的，服务器 `应该` 返回一个 `Retry-After` 的响应头，以告知客户端可以在多少时间以后重新尝试。\r\n\r\n##### 414 Request-URI Too Long\r\n\r\n该状态码表示请求的 `URI` 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。\r\n\r\n##### 415 Unsupported Media Type\r\n\r\n通常表示服务器不支持客户端请求首部 `Content-Type` 指定的数据格式。如在只接受 `JSON`格式的 `API` 中放入 `XML` 类型的数据并向服务器发送，都 `应该` 返回该状态码。\r\n\r\n该状态码也可用于如：只允许上传图片格式的文件，但是客户端提交媒体文件非法或不是图片类型，这时 `应该` 返回该状态码：\r\n\r\n```\r\nHTTP/1.1 415 Unsupported Media TypeServer: nginx/1.11.9Content-Type: application/jsonTransfer-Encoding: chunkedCache-Control: no-cache, privateDate: Sun, 24 Jun 2018 12:09:40 GMTConnection: keep-alive{\"error_code\":41500,\"message\":\"不允许上传的图片格式\"}\r\n```\r\n\r\n##### 429 Too Many Request\r\n\r\n该状态码表示用户请求次数超过允许范围。如 `API` 设定为 `60次/分钟`，当用户在一分钟内请求次数超过 60 次后，都 `应该` 返回该状态码。并且也 `应该` 在响应首部中加上下列头部：\r\n\r\n```\r\nX-RateLimit-Limit: 10 请求速率（由应用设定，其单位一般为小时/分钟等，这里是 10次/5分钟）X-RateLimit-Remaining: 0 当前剩余的请求数量X-RateLimit-Reset: 1529839462 重置时间Retry-After: 120 下一次访问应该等待的时间（秒）\r\n```\r\n\r\n例子：\r\n\r\n```\r\nHTTP/1.1 429 Too Many RequestsServer: nginx/1.11.9Content-Type: application/jsonTransfer-Encoding: chunkedX-RateLimit-Limit: 10X-RateLimit-Remaining: 0X-RateLimit-Reset: 1529839462Retry-After: 290Cache-Control: no-cache, privateDate: Sun, 24 Jun 2018 11:19:32 GMTConnection: keep-alive{\"message\":\"You have exceeded your rate limit.\",\"error_code\":42900}\r\n```\r\n\r\n`必须` 为所有的 API 设置 Rate Limit 支持。\r\n\r\n##### 500 Internal Server Error\r\n\r\n该状态码 `必须` 在服务器出错时抛出，对于所有的 `500` 错误，都 `应该` 提供完整的错误信息支持，也方便跟踪调试。\r\n\r\n##### 503 Service Unavailable\r\n\r\n该状态码表示服务器暂时处理不可用状态，当服务器需要维护或第三方 `API` 请求超时/不可达时，都 `应该`返回该状态码，其中若是主动关闭 API 服务， `应该`在返回的响应首部加上 `Retry-After` 头部，表示多少秒后可以再次访问。\r\n\r\n```\r\nHTTP/1.1 503 Service UnavailableServer: nginx/1.11.9Content-Type: application/jsonTransfer-Encoding: chunkedCache-Control: no-cache, privateDate: Sun, 24 Jun 2018 10:56:20 GMTRetry-After: 60Connection: keep-alive{\"error_code\":50300,\"message\":\"服务维护中\"}\r\n```\r\n\r\n其他 `HTTP` 状态码请参考 HTTP 状态码- 维基百科。\r\n\r\n#### 版权声明\r\n\r\n\u003e 文章发布于【二楞徐的闲谈杂鱼】(https://godruoyi.com/posts/resetful-api-design-specifications)，自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）\r\n\r\n#### 建议参考\r\n\r\n- restful-api-design-references\r\n- Principles of good RESTful API Design（译）\r\n- 理解 RESTful 架构\r\n- RESTful API 设计指南\r\n- HTTP 状态码- 维基百科","cover":"","link":"restful.html","preview":"","title":"RESTful API 设计规范"},{"content":"---\r\n\r\n最近有很多朋友去目前主流的大型互联网公司面试（阿里巴巴、京东、美团、滴滴），面试回来之后会发给我一些面试题。有些朋友轻松过关，拿到offer，但是有一些是来询问我答案的。\r\n\r\n![](/images/20180816230844.jpg)\r\n\r\n我特意整理了一下，有很多问题不是靠几句话能讲清楚，所以干脆找朋友录制了一些视频，用来回来这些面试题。很多问题其实答案很简单，但是背后的思考和逻辑不简单，要做到知其然还要知其所以然。\r\n\r\n先来看下用手机记录的面试材料：\r\n\r\n**一，阿里巴巴面试题**\r\n\r\n![](/images/20180816230908.jpg)\r\n\r\n二，京东面试题\r\n\r\n![](/images/20180816230916.jpg)\r\n\r\n三，美团面试题\r\n\r\n![](/images/20180816230924.jpg)\r\n\r\n四，滴滴面试题\r\n\r\n![](/images/20180816230931.jpg)\r\n\r\n五，本次卧底面试得到的结论\r\n\r\n**通过面试题来看，可以看出目前互联网公司面试考点为：**\r\n\r\n1.性能调优、算法数据机构\r\n\r\n2.高并发下数据安全、接口冪等性、原子性等\r\n\r\n3.分布式下协同、已经锁的处理\r\n\r\n4.数据库的分库分表、项目之间的垂直拆分\r\n\r\n出现频率高的技术点有：\r\n\r\n1.HashMap\r\n\r\n2.JVM\r\n\r\n3.Dubbo\r\n\r\n4.Mybatis\r\n\r\n5.Zookeeper\r\n\r\n6.http tcp/ip","cover":"/images/20180816230844.jpg","link":"mianshiti.html","preview":"","title":"美团、滴滴、阿里、京东的 Dubbo / JVM / Spring 面试题及答案"},{"content":"---\r\n\r\n#### 个人简历\r\n\r\n##### 个人信息\r\n\r\n| 姓    名： | 薛乐乐           | 性    别： | 男                 |\r\n| ---------- | ---------------- | ---------- | ------------------ |\r\n| 出生日期： | 1992年5月1日     | 居 住 地： | 青岛-崂山区        |\r\n| 工作年限： | 三年左右         | 电子邮件： | Aronqust@gmail.com |\r\n| 手    机： | 086- 15318888373 | 联系微信： | huc_lele(.go)      |\r\n| 户    口： | 山东省东营市     | 婚姻状况： | 未婚               |\r\n\r\n关 键 词：\t软件工程师  、网络安全工程师\r\n\r\n##### 自我评价\r\n\r\n软件工程专业出身，省级优秀毕业生毕业，熟悉整个软件开发流程，对数据结构、软件测试、软件设计、面向对象思想、算法、软件工程等专业课掌握颇好。曾一边工作，一边考取武汉大学计算机研究生，由于家庭原因，不能上学。在技术上本人灵活熟练使用SpringMVC、SSH与SSM等主流框架；熟练掌握SVN版本控制，熟悉MAVEN构建工具， 熟练mysql、sql server2005、oracle、db2等数据库； 熟练JSP、JavaSctipt、css、Html、xml、Ajax 、Jquery、bootstrap等技术。自学Android，自己根据保卫萝卜，完成一款类似游戏的代码实现，期待发挥我的任何学习价值。同时了解C语言、C++、C#、VB语言、易语言等的使用。对网络安全有一定的了解与研究，曾编写过炫舞外挂、网络爬虫（JAVA也写过简单的爬虫，熟悉JAVA语言的网络编程部分）等外挂小程序。有自己的网络安全圈子，在web网络安全这块有五六年的实战经验。对新技术有一定的追求，在github上有自己的博客，喜欢开源技术，研究开源的框架，对爬虫有自己的一定研究。目前学习Python、Spring boot、Spring Cloud等，也期待在工作中去学习使用。本人对工作认真负责，且具有较强的团队合作精神及较强的学习能力，对软件开发和设计工作具有浓厚的兴趣和开拓精神，同时具备良好的沟通表达能力与职业素养精神、并且能够承受压力、能够服从公司安排。性格上而言，没有程序员自身内向的特点，在校还担任校学生会副主席，管理方面也颇有心得，有自信可以努力为咱们公司贡献我自己。期待您的赏识。\r\n\r\n##### 求职意向\r\n\r\n到岗时间：\t即时\r\n工作性质：\t全职\r\n希望行业：\t计算机软件\r\n目标地点：\t青岛等\r\n期望薪水：\t面议/月\r\n目标职能：\t软件工程师\r\n\r\n##### 工作经验\r\n\r\n2018/6-至今：大连华信\r\n所属行业：    互联网\r\n\r\n巨商汇科技   技术主管 \r\n参与巨商汇科技项目的开发工作\r\n\r\n2017/5-2018/6：上海安硕信息技术股份有限公司\r\n所属行业：     金融业系统开发\r\n山东交付部    高级Java软件工程师 \r\n参与威海蓝海银行的信贷系统的建设，从需求调研-文档编写-系统开发建设-系统测试-系统上线-线后维护，参与整个过程，主要负责部分文档的编写，包括信贷服务接口文档、产品说明书、压力测试报告等文档；接口的开发，包括与核心交互的各个socket接口开发以及各个系统的对接接口开发；对接数仓，完成数据对接；对接电票系统，完成测试与开发；产品压力测试，使用LoadRunner工具；解决产品技术问题;参与齐鲁银行网贷平台建设，作为技术支持，协助完成接口的编写；带队参与潍坊银行公积金贷款的项目建设，完成从需求调研-文档编写-系统开发建设-系统测试-系统上线-线后维护整个过程，且承担行方与公司沟通桥梁，担任项目经理角色；参与日照银行，零售信贷系统的建设，\r\n2015/3—2017/4：甲骨文兴学信息科技有限公司\r\n所属行业：\t计算机软件开发、培训\r\n教学部    高级Java软件工程师 \r\n对学员进行JAVA开发体系的培训，实现学员能够找到一份初级java开发工程师的工作，在工作期间，成功实现百位多学员就业良好。同时作为项目组长，带领团队，参与公司的项目需求分析和代码编写和部署，后期参与项目的维护。重点完成的项目：《人力资源管理系统》（公司内部使用）\r\n2011/1—至今：网络安全\r\n所属行业：\t网络安全工程师\r\n有自己的网络安全圈子，对网络安全有自己的见解与看法，写过游戏外挂、爬虫一系列的小程序，渗透过一系列网站，但是没有任何违背原则的行为，对相关漏洞有一定的研究\r\n\r\n##### 项目经验\r\n\r\n2017/11– 2018/5 ：  潍坊银行公积金项目建设\r\n软件环境：\tlinux/tomcat7/JDK1.7/db2/was\r\n硬件环境：\t双CPU、内存2G以上、硬盘240G\r\n开发工具：\tIDEA/tomcat7/db2\r\n项目描述：\t行内开发的新的业务品种，多个公司一起合作完成系统建设，本公司承接的基于原有信贷系统的建设开发\r\n责任描述：\t项目经理，重难点解决、服务端、客户端核心开发，带领六个人的团队\r\n\r\n------\r\n\r\n2017/11– 2017/11 ：  济南齐鲁银行网贷二期建设\r\n软件环境：\tlinux/tomcat7/JDK1.7/db2/was\r\n硬件环境：\t双CPU、内存2G以上、硬盘240G\r\n开发工具：\tIDEA/tomcat7/db2\r\n项目描述：\t网贷项目的二期建设，主要包括网贷的一些在人行要求下的更新需求开发，以及对相关方面的对接、测试 \r\n责任描述：\t接口开发、测试系统\r\n\r\n------\r\n\r\n2017/5– 2017/11 ：  威海蓝海银行信贷系统\r\n软件环境：\tlinux/tomcat7/JDK1.7/db2/was\r\n硬件环境：\t双CPU、内存2G以上、硬盘240G\r\n开发工具：\tIDEA/tomcat7/db2\r\n项目描述：\t威海银行是山东省唯一一家民营银行，银行刚刚创建需要创建系统，公司负责信贷系统建设，产品有原型，属于二次开发，但是需求修改颇多，需要二次开发的地方很多\r\n责任描述：\t接口开发、批量开发、程序开发、重难点解决、对接其他系统\r\n\r\n------\r\n\r\n2015/9 – 2017/4 ：  学员培训项目实训相关 \r\n软件环境：\tWindowsXp/tomcat6.0/JDK1.6/mysql\r\n硬件环境：\t双CPU、内存2G以上、硬盘240G\r\n开发工具：\tMyEclips/tomcat6.0/mysql\r\n项目描述：\t包括很多项目。论坛系统、货存管理系统、视频博客系统、绿色尚晨购物网站等。项目采用B/S架构，MVC模式，基于J2EE框架、SSH、SSM外加其他技术来实现 \r\n责任描述：\t(1)培训学员，带领团队完成整个项目的开发(2) 参与编码分析及部分文档的编写 (3) 在该项目中主要负责核心模块代码的实现（4）评价管理、后期维护\r\n\r\n------\r\n\r\n2015/1 -- 2015/7：如诺电子书阅读网站（毕业设计）\r\n软件环境：\tWindows10/tomcat7.0/JDK1.7MySQL\r\n硬件环境：\t8核、内存16G以上、硬盘1t\r\n开发工具：\tMyEclips2014/tomcat7.0/MySQL\r\n项目描述：\t通过对比网络上的电子书在线阅读网站，安全性大多有问题，存在弱口令（采用md5加密解决）、文件上传漏洞（限制）、零日漏洞（软件测试，尽可能的减少）、SQL注入（前、后台验证，PreparedStatement）等。系统采用SSH集成的方式，划分为显示层、Action层、Service层、Dao层、entity层，使用Hibernate作为数据对象持久化引擎，SpringIOC实现业务对象管理,Struts负责请求的转发和视图管理，这样提高了系统的可维护性、和可扩展性。通过Ajax异步传输机制完成数据无刷新展示，具有更好的用户体验。Jquery、css页面设计。本系统主要功能模块包括：用户注册、用户登录、用户阅读、用户评论、用户投票、用户下载、管理员管理、用户管理、书籍管理、投票管理、评论管理等功能。\r\n责任描述：\t从软件需求分析、软件系统设计、软件建模、软件数据库设计与开发、到整个网站的开发编码实现，再到软件的测试（采用loadrunner等），独立完成，完全按照软件开发流程，符合企业开发标准\r\n\r\n------\r\n\r\n2015/9 -- 2016/3 ：人事管理系统\r\n软件环境：\tWindows XP/2000/2003 JDK7.0 Tomcat mysql\r\n硬件环境：\t双CPU、内存2G以上、硬盘240G\r\n开发工具：\tMyEclips2014+mysql+tomcat服务器\r\n项目描述：\t本系统主要负责处理公司内部相关管理业务。人事管理系统，方便企业的用人，包括部门信息、员工信息、员工考勤、员工评价、员工工资、系统用户等。系统采用基于SSH框架相关技术实现,所采用技术全部为当前主流并且成熟框架。系统采用MVC设计模式，AJAX + WEB三层架构 Struts + Spring + Hibernate。利用AJAX提高用户体验。系统表现层采用JSP + Struts，业务模型层采用Spring + JavaBeans ，数据操作层采用Hibernate。其他包含技术：“DWR”，“Xml”\r\n责任描述：\t(1) 参与系统设计及数据库设计、部分文档的编写 (2) 在该项目中主要负责员工考勤、部门信息代码的实现\r\n\r\n------\r\n\r\n2014/7—2015/7   视频播客系统\r\n软件环境：\tWindows10/tomcat7.0/JDK1.7MySQL\r\n硬件环境：\t双CPU、内存2G以上、硬盘240G\r\n开发工具：\tMyEclips2014/tomcat7.0/MySQL\r\n项目描述：\t本系统采用SSH框架，实现对视频播客系统的设计与开发\r\n责任描述：\t独立设计，开发\r\n\r\n------\r\n\r\n2014/7—2015/7   教务管理系统\r\n软件环境：\tWindows10/tomcat7.0/JDK1.7MySQL\r\n硬件环境：\t双CPU、内存2G以上、硬盘240G\r\n开发工具：\tMyEclips2014/tomcat7.0/MySQL\r\n项目描述：\t本软件仿照青岛科技大学教务管理系统，实现教务系统的桌面化、pc端软件，采用java完成设计与开发\r\n责任描述：\t独立设计，开发\r\n\r\n------\r\n\r\n2012/7—2014/7   仿Editplus\r\n软件环境：\tWindows10/tomcat7.0/JDK1.7MySQL\r\n硬件环境：\t双CPU、内存2G以上、硬盘240G\r\n开发工具：\tMyEclips2014/tomcat7.0/MySQL\r\n项目描述：\t本软件仿照EditPlus软件，实现Editplus的类似功能，采用java完成设计与开发\r\n责任描述：\t独立设计，开发\r\n\r\n------\r\n\r\n2012/7—2014/7   文档编辑器\r\n软件环境：\tWindows 10 VisualStudio2010\r\n硬件环境：\t双CPU、内存2G以上、硬盘240G\r\n开发工具：\tVisual Studio2010\r\n项目描述：\t本软件仿照word软件，实现对文档的编辑等功能，采用WinForm完成设计与开发\r\n责任描述：\t独立设计，开发\r\n\r\n------\r\n\r\n##### 教育经历\r\n\r\n2011/9 -- 2015/6 \t青岛科技大学\t软件工程\t本科\r\n\r\n##### 语言能力\r\n\r\n英语（一般）：\t听说（一般），读写（良好）\r\n英语等级：\t英语六级\r\n\r\n","cover":"","link":"jianli.html","preview":"","title":"个人简历"},{"content":"---\r\n\r\n##### Clone（下载）项目\r\n\r\ngit clone project-url  #按照gerrit上的提示操作即可\r\n\r\n##### 查看状态\r\n\r\ngit status   #最常用的操作，会给出明确的提示\r\n\r\n##### 查看分支（tag）\r\n\r\ngit br      #查看本地分支，当前分支颜色是绿色，前面有个 *\r\ngit br -a   #查看所有分支，其中的远程分支可用户切换分支使用\r\n\r\n##### 切换分支\r\n\r\ngit co branch-name  #branch-name指已经存在的分支名称\r\n\r\n##### 新建分支\r\n\r\ngit br branch-name    #从当前分支的当前commit新建一个分支\r\ngit co branch-name    #切换到新建的分支，切换的时候会携带未提交的修改\r\n\r\n##### 拉取远程修改\r\n\r\ngit pull    #会拉去包括tag在内的信息\r\n\r\n##### 提交修改\r\n\r\ngit add . –A    #将当前目录下的所有更改都添加到缓存区\r\ngit ci          #将缓存区的更改提交到本地库\r\n\r\n##### 打标签\r\n\r\ngit tag tag-name            #在当前commit上打一个tag\r\ngit tag tag-name commitId   #在commitId上打一个tag\r\n\r\n##### 推送修改\r\n\r\ngit push          #将当前分支的更改推送到远程分支\r\ngit push –tags    #将当前分支及所有新打的tag推送到远程服务器\r\n\r\n##### 合并分支\r\n\r\ngit co master   #将当前分支切换到master\r\ngit merge dev   #将dev分支的修改切换到master\r\n\r\n##### 删除远程分支或者tag\r\n\r\ngit push origin –delete branch-name     #删除远程分支，需要gerrit权限\r\ngit push origin --delete tag tag-name   #删除远程tag，需要gerrit权限\r\n\r\n#### 重写上一次注释\r\n\r\n#如果提交后立即发现注释写错了，即只需要重写上一次的注释，在这些如下命令；\r\ngit ci –amend\r\n\r\n##### 重写前几次注释\r\n\r\n慎用git reset操作，尤其是reset已经推送到远程服务器上的commit。\r\n如果发现之前的几次提交注释写错了，找到写错注释的前一个commitId，假设为abcdefg，执行\r\ngit reset –-soft abcdefg    #类似将abcdefg之后的git ci命令取消，并且将git add命令合并得到的结果。然后执行\r\ngit ci                      #和正常提交一样写注释。\r\n\r\n##### 取消发布（慎用！配合操作！）\r\n\r\n场景：1.0.0已经发布，计划功能F1，F2，F3，以及不过B1，B2需要在1.1.0发布，\r\n分支F1，F2，F3，B1，B2都已经合到dev上了，并且已经发布了1.1.0-b1，1.1.0-b2两个beta版。\r\n此时F1功能因种种原因需要取消，此时需要执行如下操作：\r\ngit co dev           #切换到dev分支。\r\ngit tag -d 1.1.0-b1  #删除本地tag 1.1.0-b1\r\ngit tag -d 1.1.0-b2  #删除本地tag 1.1.0-b2\r\ngit reset –hard 1.0.0  #将所有合并撤销，恢复dev到1.0.0的状态。\r\ngit merge F2   #重新合并F2\r\ngit merge F3   #重新合并F3\r\ngit merge B1   #重新合并B1\r\ngit merge B2   #重新合并B2\r\ngit tag 1.1.0-b1 #重新打tag 1.1.0-b1\r\ngit push origin –delete tag 1.1.0-b1 #删除远程分支1.1.0-b1\r\ngit push origin –delete tag 1.1.0-b2 #删除远程分支1.1.0-b2\r\ngit push -f origin dev #使用本地dev分支强制更新远程dev分支\r\ngit push -tags   #推送本地tag到远程服务器","cover":"","link":"git.html","preview":"","title":"git常用操作"},{"content":"---\r\n\r\n![](/images/99373_dec5.jpg)\r\n\r\n陌生的城市\u003cbr\u003e\r\n熟悉的身影\u003cbr\u003e\r\n穿梭在霓虹灯间的\u003cbr\u003e\r\n稚嫩的脸庞\u003cbr\u003e\r\n似乎再去说些什么\u003cbr\u003e\r\n又真的\u003cbr\u003e\r\n难以说出来\u003cbr\u003e\r\n青春的易逝\u003cbr\u003e\r\n总在陈述着\u003cbr\u003e\r\n相同的故事\u003cbr\u003e\r\n白驹过隙的穿梭\u003cbr\u003e\r\n悄之梨华间\u003cbr\u003e\r\n已失去了好多\u003cbr\u003e\r\n那些精彩的\u003cbr\u003e\r\n那些回忆\u003cbr\u003e","cover":"","link":"wuti.html","preview":"\u003cp\u003e城市太大，熟悉的身影\u003c/p\u003e\n","title":"无题"},{"content":"---\r\n\r\n![](/images/103522_dec5.jpg)\r\n\r\n​\t\t\t\t\t\t\t\t\t\t\t失去\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t意味着新的开始\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t一味地执着\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t \t那份心伤仍在\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t背起行囊\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t劲装出发\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t让风拭去眼角的泪\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t坚强的离别\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t或许以后不会相见\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t起码曾经有过想念\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t人生之萧何\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t尽于此\u003cbr\u003e\r\n\r\n​\t\t\t\t\t\t\t\t\t\t\t愿离开的人\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t记得等待的我\u003cbr\u003e","cover":"","link":"shiqu.html","preview":"\u003cp\u003e如果有一天 我们都发现好聚好散 不过是一种遮掩\u003c/p\u003e\n","title":"失去"},{"content":"---\r\n\r\n概念：\r\n\r\nVO（View Object）：视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。\r\n\r\nDTO（Data Transfer Object）：数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。\r\n\r\nDO（Domain Object）：领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。\r\n\r\nPO（Persistent Object）：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。\r\n\r\n##### VO与DTO的区别\r\n\r\n大家可能会有个疑问（在笔者参与的项目中，很多程序员也有相同的疑惑）：既然DTO是展示层与服务层之间传递数据的对象，为什么还需要一个VO呢？对！对于绝大部分的应用场景来说，DTO和VO的属性值基本是一致的，而且他们通常都是POJO，因此没必要多此一举，但不要忘记这是实现层面的思维，对于设计层面来说，概念上还是应该存在VO和DTO，因为两者有着本质的区别，DTO代表服务层需要接收的数据和返回的数据，而VO代表展示层需要显示的数据。\r\n\r\n用一个例子来说明可能会比较容易理解：例如服务层有一个getUser的方法返回一个系统用户，其中有一个属性是gender(性别)，对于服务层来说，它只从语义上定义：1-男性，2-女性，0-未指定，而对于展示层来说，它可能需要用“帅哥”代表男性，用“美女”代表女性，用“秘密”代表未指定。说到这里，可能你还会反驳，在服务层直接就返回“帅哥美女”不就行了吗？对于大部分应用来说，这不是问题，但设想一下，如果需求允许客户可以定制风格，而不同风格对于“性别”的表现方式不一样，又或者这个服务同时供多个客户端使用（不同门户），而不同的客户端对于表现层的要求有所不同，那么，问题就来了。再者，回到设计层面上分析，从职责单一原则来看，服务层只负责业务，与具体的表现形式无关，因此，它返回的DTO，不应该出现与表现形式的耦合。\r\n\r\n理论归理论，这到底还是分析设计层面的思维，是否在实现层面必须这样做呢？一刀切的做法往往会得不偿失，下面我马上会分析应用中如何做出正确的选择。\r\n\r\n##### VO与DTO的应用\r\n\r\n上面只是用了一个简单的例子来说明VO与DTO在概念上的区别，本节将会告诉你如何在应用中做出正确的选择。\r\n\r\n在以下才场景中，我们可以考虑把VO与DTO二合为一（注意：是实现层面）：\r\n\r\n当需求非常清晰稳定，而且客户端很明确只有一个的时候，没有必要把VO和DTO区分开来，这时候VO可以退隐，用一个DTO即可，为什么是VO退隐而不是DTO？回到设计层面，服务层的职责依然不应该与展示层耦合，所以，对于前面的例子，你很容易理解，DTO对于“性别”来说，依然不能用“帅哥美女”，这个转换应该依赖于页面的脚本（如JavaScript）或其他机制（JSTL、EL、CSS）\r\n\r\n即使客户端可以进行定制，或者存在多个不同的客户端，如果客户端能够用某种技术（脚本或其他机制）实现转换，同样可以让VO退隐\r\n\r\n以下场景需要优先考虑VO、DTO并存：\r\n\r\n上述场景的反面场景\r\n\r\n因为某种技术原因，比如某个框架（如Flex）提供自动把POJO转换为UI中某些Field时，可以考虑在实现层面定义出VO，这个权衡完全取决于使用框架的自动转换能力带来的开发和维护效率提升与设计多一个VO所多做的事情带来的开发和维护效率的下降之间的比对。\r\n\r\n如果页面出现一个“大视图”，而组成这个大视图的所有数据需要调用多个服务，返回多个DTO来组装（当然，这同样可以通过服务层提供一次性返回一个大视图的DTO来取代，但在服务层提供一个这样的方法是否合适，需要在设计层面进行权衡）。\r\n\r\n##### DTO与DO的区别\r\n\r\n首先是概念上的区别，DTO是展示层和服务层之间的数据传输对象（可以认为是两者之间的协议），而DO是对现实世界各种业务角色的抽象，这就引出了两者在数据上的区别，例如UserInfo和User（对于DTO和DO的命名规则，请参见笔者前面的一篇博文），对于一个getUser方法来说，本质上它永远不应该返回用户的密码，因此UserInfo至少比User少一个password的数据。而在领域驱动设计中，正如第一篇系列文章所说，DO不是简单的POJO，它具有领域业务逻辑。\r\n\r\n##### DTO与DO的应用\r\n\r\n从上一节的例子中，细心的读者可能会发现问题：既然getUser方法返回的UserInfo不应该包含password，那么就不应该存在password这个属性定义，但如果同时有一个createUser的方法，传入的UserInfo需要包含用户的password，怎么办？在设计层面，展示层向服务层传递的DTO与服务层返回给展示层的DTO在概念上是不同的，但在实现层面，我们通常很少会这样做（定义两个UserInfo，甚至更多），因为这样做并不见得很明智，我们完全可以设计一个完全兼容的DTO，在服务层接收数据的时候，不该由展示层设置的属性（如订单的总价应该由其单价、数量、折扣等决定），无论展示层是否设置，服务层都一概忽略，而在服务层返回数据时，不该返回的数据（如用户密码），就不设置对应的属性。\r\n\r\n对于DO来说，还有一点需要说明：为什么不在服务层中直接返回DO呢？这样可以省去DTO的编码和转换工作，原因如下：\r\n\r\n两者在本质上的区别可能导致彼此并不一一对应，一个DTO可能对应多个DO，反之亦然，甚至两者存在多对多的关系。\r\n\r\nDO具有一些不应该让展示层知道的数据\r\n\r\nDO具有业务方法，如果直接把DO传递给展示层，展示层的代码就可以绕过服务层直接调用它不应该访问的操作，对于基于AOP拦截服务层来进行访问控制的机制来说，这问题尤为突出，而在展示层调用DO的业务方法也会因为事务的问题，让事务难以控制。\r\n\r\n对于某些ORM框架（如Hibernate）来说，通常会使用“延迟加载”技术，如果直接把DO暴露给展示层，对于大部分情况，展示层不在事务范围之内（Open session in view在大部分情况下不是一种值得推崇的设计），如果其尝试在Session关闭的情况下获取一个未加载的关联对象，会出现运行时异常（对于Hibernate来说，就是LazyInitiliaztionException）。\r\n\r\n从设计层面来说，展示层依赖于服务层，服务层依赖于领域层，如果把DO暴露出去，就会导致展示层直接依赖于领域层，这虽然依然是单向依赖，但这种跨层依赖会导致不必要的耦合。\r\n\r\n对于DTO来说，也有一点必须进行说明，就是DTO应该是一个“扁平的二维对象”，举个例子来说明：如果User会关联若干个其他实体（例如Address、Account、Region等），那么getUser()返回的UserInfo，是否就需要把其关联的对象的DTO都一并返回呢？如果这样的话，必然导致数据传输量的大增，对于分布式应用来说，由于涉及数据在网络上的传输、序列化和反序列化，这种设计更不可接受。如果getUser除了要返回User的基本信息外，还需要返回一个AccountId、AccountName、RegionId、RegionName，那么，请把这些属性定义到UserInfo中，把一个“立体”的对象树“压扁”成一个“扁平的二维对象”，笔者目前参与的项目是一个分布式系统，该系统不管三七二十一，把一个对象的所有关联对象都转换为相同结构的DTO对象树并返回，导致性能非常的慢。\r\n\r\n##### DO与PO的区别\r\n\r\nDO和PO在绝大部分情况下是一一对应的，PO是只含有get/set方法的POJO，但某些场景还是能反映出两者在概念上存在本质的区别：\r\n\r\nDO在某些场景下不需要进行显式的持久化，例如利用策略模式设计的商品折扣策略，会衍生出折扣策略的接口和不同折扣策略实现类，这些折扣策略实现类可以算是DO，但它们只驻留在静态内存，不需要持久化到持久层，因此，这类DO是不存在对应的PO的。\r\n\r\n同样的道理，某些场景下，PO也没有对应的DO，例如老师Teacher和学生Student存在多对多的关系，在关系数据库中，这种关系需要表现为一个中间表，也就对应有一个TeacherAndStudentPO的PO，但这个PO在业务领域没有任何现实的意义，它完全不能与任何DO对应上。这里要特别声明，并不是所有多对多关系都没有业务含义，这跟具体业务场景有关，例如：两个PO之间的关系会影响具体业务，并且这种关系存在多种类型，那么这种多对多关系也应该表现为一个DO，又如：“角色”与“资源”之间存在多对多关系，而这种关系很明显会表现为一个DO——“权限”。\r\n\r\n某些情况下，为了某种持久化策略或者性能的考虑，一个PO可能对应多个DO，反之亦然。例如客户Customer有其联系信息Contacts，这里是两个一对一关系的DO，但可能出于性能的考虑（极端情况，权作举例），为了减少数据库的连接查询操作，把Customer和Contacts两个DO数据合并到一张数据表中。反过来，如果一本图书Book，有一个属性是封面cover，但该属性是一副图片的二进制数据，而某些查询操作不希望把cover一并加载，从而减轻磁盘IO开销，同时假设ORM框架不支持属性级别的延迟加载，那么就需要考虑把cover独立到一张数据表中去，这样就形成一个DO对应对个PO的情况。\r\n\r\nPO的某些属性值对于DO没有任何意义，这些属性值可能是为了解决某些持久化策略而存在的数据，例如为了实现“乐观锁”，PO存在一个version的属性，这个version对于DO来说是没有任何业务意义的，它不应该在DO中存在。同理，DO中也可能存在不需要持久化的属性。\r\n\r\n##### DO与PO的应用\r\n\r\n由于ORM框架的功能非常强大而大行其道，而且JavaEE也推出了JPA规范，现在的业务应用开发，基本上不需要区分DO与PO，PO完全可以通过JPA，Hibernate Annotations/hbm隐藏在DO之中。虽然如此，但有些问题我们还必须注意：\r\n\r\n对于DO中不需要持久化的属性，需要通过ORM显式的声明，如：在JPA中，可以利用@Transient声明。\r\n\r\n对于PO中为了某种持久化策略而存在的属性，例如version，由于DO、PO合并了，必须在DO中声明，但由于这个属性对DO是没有任何业务意义的，需要让该属性对外隐藏起来，最常见的做法是把该属性的get/set方法私有化，甚至不提供get/set方法，但对于Hibernate来说，这需要特别注意，由于Hibernate从数据库读取数据转换为DO时，是利用反射机制先调用DO的空参数构造函数构造DO实例，然后再利用JavaBean的规范反射出set方法来为每个属性设值，如果不显式声明set方法，或把set方法设置为private，都会导致Hibernate无法初始化DO，从而出现运行时异常，可行的做法是把属性的set方法设置为protected。\r\n\r\n对于一个DO对应多个PO，或者一个PO对应多个DO的场景，以及属性级别的延迟加载，Hibernate都提供了很好的支持，请参考Hibnate的相关资料。","cover":"","link":"entity.html","preview":"\u003cp\u003eVo、Dto、Do、Po四个对象，是开发中常用的对象，那么怎么正确使用呢？还得理解\u003c/p\u003e\n","title":"Vo、Dto、Do、Po概念以及区别与应用"},{"content":"---\r\n\r\n##### 同业客户\r\n\r\n同业客户就是其他银行及非银行金融机构\r\n\r\n##### 集团客户\r\n\r\n大型、特大型企业\r\n\r\n##### 授信\r\n\r\n授信：是指本行向客户直接提供资金支持，或对客户在有关经济活动中的信用向第三方作出保证的行为。 本行客户的授信包括表内外授信，表内授信包括贷款、贴现、透支、贸易融资、拆借和回购等；表外业务包括贷款承诺、保证、信用证、票据承兑、 保函等 \r\n\r\n##### 内部授信\r\n\r\n内部授信：是指确定的授信额度后，内部掌握，供客户申请信贷业务时参考、 控制，对外保密。 \r\n\r\n##### 公开授信\r\n\r\n公开授信：是指在内部控制线或额度内告诉客户部分授信额度。\r\n\r\n##### 综合授信\r\n\r\n综合授信：是指本行对单一客户确定的内部控制最高综合授信额度，包括贷款、 项目融资、贸易融资（如打包放款、进出口押汇）、贴现、透支、保理、拆借和回购等 表内授信，以及贷款承诺、保证（保函）、信用证、票据承兑等表外授信形式的本、外 币统一综合授信 \r\n\r\n##### 集团授信\r\n\r\n集团授信：是指本行对集团客户确定的内部控制的最高综合授信额度。\r\n\r\n##### 单一客户授信\r\n\r\n单一客户授信：是指本行对单一客户确定的内部控制最高综合授信额度\r\n\r\n##### 敞口额度\r\n\r\n敞口额度是企业实际可用于支付的信贷资金额度，银行账面贷款或承兑额度等于敞口额度与保证金额度之和。 企业的贷款额度也叫综合授信额度，还叫敞口额度。\r\n\r\n##### 名义金额\r\n\r\n名义金额含义：公允价值无法确定，这个经济事项又确实存在，给它一个金额,让帐上有体现，不然易疏漏，让资产流失。\r\n\r\n##### 三个办法一个指引\r\n\r\n三法是指：《固定资产贷款管理暂行办法》、《流动资金贷款管理暂行办法》和《个人贷款管理暂行办法》三种管理暂行办法。 一指引是指：《项目融资业务指引》。\r\n\r\n##### 资产保全\r\n\r\n资产保全是指维护资产的完整，防止流失而采取的一系列措施,包括查封、冻结等。\r\n\r\n##### 管户权\r\n\r\n管户权：是指在客户第一次与银行合作办理担保业务，且有实际的业务关系时，在银行业务系统中生成记录，管户权是其中一项，管户权默认为办理此项业务的所属银行。\r\n\r\n##### 一般重组\r\n\r\n一般重组是指同一控制下的企业合并产生的企业会计处理办法与税收规定不一致应进行纳税调整的金额","cover":"","link":"jinrong.html","preview":"\u003cp\u003e金融相关名词解释，开发需要\u003c/p\u003e\n","title":"金融名词解释"},{"content":"---\r\n\r\n##### 主题操作\r\n\r\nEnter = 换行\r\n\r\nTab = 缩进一级\r\n\r\nShift + Tab = 提升一级\r\n\r\nShift + Enter = 添加主题备注\r\n\r\nCommand + ] = 进入下一主题\r\n\r\nCommand + [ = 返回上一主题\r\n\r\nCommand + . = 展开/收缩主题\r\n\r\nCommand + Enter = 完成状态/恢复编辑\r\n\r\nCommand + Shift + Delete = 删除主题\r\n\r\nCommand + Shift +↑= 主题上移\r\n\r\nCommand + Shift +↓= 主题下移\r\n\r\n##### 文本操作\r\n\r\nCommand + C = 复制\r\n\r\nCommand + V = 粘贴\r\n\r\nCommand + X = 剪切\r\n\r\nCommand + Z = 撤消\r\n\r\nCommand + U = 下划线\r\n\r\nCommand + I = 斜体\r\n\r\nCommand + B = 加粗\r\n\r\nCommand + A =全选\r\n\r\n##### 高级进阶\r\n\r\n空格@，标签  \r\n\r\n空格# ，标签\r\n\r\nAlt + Enter = 添加图片\r\n\r\nAlt +  D、R、Y、G、B、P = 主题颜色控制\r\n\r\nAlt +  1、2、3、4= 主题等级\r\n\r\nEnter + ? = 快捷键目录\r\n\r\nShift + 点击 = 多选\r\n\r\nShift + F = 搜索\r\n\r\n输入链接 = 直达  [www.hongrendd.com](http://www.hongrendd.com)\r\n\r\nCommand + N = 新建主题\r\n\r\nCommand + J  = 新建文件夹\r\n\r\n来自幕布技术支持，Yannberg的大脑共享\r\n\r\n应用场景\r\n\r\n会议记录\r\n\r\n思维整理\r\n\r\n项目管理\r\n\r\n读书笔记 \r\n\r\n撰写方案\r\n\r\n脑力分享\r\n\r\n流程推进","cover":"","link":"mubu.html","preview":"\u003cp\u003e幕布使用指南\u003c/p\u003e\n","title":"MUBU快捷使用指南"},{"content":"---\r\n\r\n- We must not allow the clock and the calendar to blind us to the fact that each moment is a miracle and a mystery.\r\n\r\n  我们不能让时钟或月历，掩饰每一刻都是奇迹且很神祕这个事实。 \r\n\r\n- 如果你想要和别人制造羁绊，就要承受流泪的风险 \r\n\r\n- 大概世间所有美丽的东西，都需要全心全意的去呵护 \r\n\r\n- 即使冒着被伤害的风险，也愿意为了照顾好她，用尽全力 \r\n\r\n- 彼此需要，成为彼此唯一，偶尔的小脾气刺伤了你，也会想要悉心呵护她 ","cover":"","link":"1.html","preview":"\u003cp\u003e每一天我都想，有你的陪伴，你走进我的生命里，感谢命运\u003c/p\u003e\n","title":"2018.08.16"},{"content":"---\r\n\r\n我像一个傻子似的\u003cbr/\u003e追着你 宠着你\u003cbr\u003e现实\u003cbr\u003e像一盆冰水\u003cbr\u003e狠狠地浇灌在了\u003cbr\u003e我高昂的头颅\u003cbr\u003e低下了\u003cbr\u003e认命了\u003cbr\u003e我终归抵抗不了\u003cbr\u003e命运之手\u003cbr\u003e一股挫败之情\u003cbr\u003e油然而生\u003cbr\u003e我是要坠落了吗\u003cbr\u003e不\u003cbr\u003e前方仍旧光明\u003cbr\u003e我头颅\u003cbr\u003e依旧高昂\u003cbr\u003e握不住的沙\u003cbr\u003e随风撒去\u003cbr\u003e让风擦拭我的眼泪\u003cbr\u003e带我远行\u003cbr\u003e终有一天\u003cbr\u003e在落日的余晖下\u003cbr\u003e佳人在侧\u003cbr\u003e\r\n","cover":"","link":"一段旅程.html","preview":"\u003cp\u003e我像一个傻子似的\u003cbr/\u003e追着你 宠着你\u003cbr/\u003e现实\u003c/p\u003e\n","title":"一段旅程"},{"content":"---\r\n\r\n静谧夜空\u003cbr/\u003e\r\n冷冷的风\u003cbr/\u003e\r\n窗外无比美丽的\u003cbr/\u003e\r\n城市灯火\u003cbr/\u003e\r\n想想你\u003cbr/\u003e\r\n想想我\u003cbr/\u003e\r\n不由莞尔一笑\u003cbr/\u003e\r\n或许\u003cbr/\u003e\r\n这是最好的喜欢\u003cbr/\u003e\r\n一切 一切\u003cbr/\u003e\r\n情绪波动\u003cbr/\u003e\r\n变得静如止水\u003cbr/\u003e\r\n爱你\u003cbr/\u003e","cover":"","link":"心静.html","preview":"\u003cp\u003e静谧夜空\u003cbr\u003e  冷冷的风\u003cbr\u003e  窗外无比美丽的\u003cbr\u003e  城市灯火\u003c/p\u003e\n","title":"心静"}]