[{"content":"---\r\n\r\n![](/images/99373_dec5.jpg)\r\n\r\n陌生的城市\u003cbr\u003e\r\n熟悉的身影\u003cbr\u003e\r\n穿梭在霓虹灯间的\u003cbr\u003e\r\n稚嫩的脸庞\u003cbr\u003e\r\n似乎再去说些什么\u003cbr\u003e\r\n又真的\u003cbr\u003e\r\n难以说出来\u003cbr\u003e\r\n青春的易逝\u003cbr\u003e\r\n总在陈述着\u003cbr\u003e\r\n相同的故事\u003cbr\u003e\r\n白驹过隙的穿梭\u003cbr\u003e\r\n悄之梨华间\u003cbr\u003e\r\n已失去了好多\u003cbr\u003e\r\n那些精彩的\u003cbr\u003e\r\n那些回忆\u003cbr\u003e","cover":"","link":"wuti.html","preview":"\u003cp\u003e城市太大，熟悉的身影\u003c/p\u003e\n","title":"无题"},{"content":"---\r\n\r\n![](/images/103522_dec5.jpg)\r\n\r\n​\t\t\t\t\t\t\t\t\t\t\t失去\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t意味着新的开始\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t一味地执着\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t \t那份心伤仍在\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t背起行囊\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t劲装出发\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t让风拭去眼角的泪\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t坚强的离别\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t或许以后不会相见\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t起码曾经有过想念\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t人生之萧何\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t尽于此\u003cbr\u003e\r\n\r\n​\t\t\t\t\t\t\t\t\t\t\t愿离开的人\u003cbr\u003e\r\n\t\t\t\t\t\t\t\t\t\t\t记得等待的我\u003cbr\u003e","cover":"","link":"shiqu.html","preview":"\u003cp\u003e如果有一天 我们都发现好聚好散 不过是一种遮掩\u003c/p\u003e\n","title":"失去"},{"content":"---\r\n\r\n- We must not allow the clock and the calendar to blind us to the fact that each moment is a miracle and a mystery.\r\n\r\n  我们不能让时钟或月历，掩饰每一刻都是奇迹且很神祕这个事实。 \r\n\r\n- 如果你想要和别人制造羁绊，就要承受流泪的风险 \r\n\r\n- 大概世间所有美丽的东西，都需要全心全意的去呵护 \r\n\r\n- 即使冒着被伤害的风险，也愿意为了照顾好她，用尽全力 \r\n\r\n- 彼此需要，成为彼此唯一，偶尔的小脾气刺伤了你，也会想要悉心呵护她 ","cover":"","link":"1.html","preview":"\u003cp\u003e每一天我都想，有你的陪伴，你走进我的生命里，感谢命运\u003c/p\u003e\n","title":"2018.08.16"},{"content":"---\r\n\r\n我像一个傻子似的\u003cbr/\u003e追着你 宠着你\u003cbr\u003e现实\u003cbr\u003e像一盆冰水\u003cbr\u003e狠狠地浇灌在了\u003cbr\u003e我高昂的头颅\u003cbr\u003e低下了\u003cbr\u003e认命了\u003cbr\u003e我终归抵抗不了\u003cbr\u003e命运之手\u003cbr\u003e一股挫败之情\u003cbr\u003e油然而生\u003cbr\u003e我是要坠落了吗\u003cbr\u003e不\u003cbr\u003e前方仍旧光明\u003cbr\u003e我头颅\u003cbr\u003e依旧高昂\u003cbr\u003e握不住的沙\u003cbr\u003e随风撒去\u003cbr\u003e让风擦拭我的眼泪\u003cbr\u003e带我远行\u003cbr\u003e终有一天\u003cbr\u003e在落日的余晖下\u003cbr\u003e佳人在侧\u003cbr\u003e\r\n","cover":"","link":"一段旅程.html","preview":"\u003cp\u003e我像一个傻子似的\u003cbr/\u003e追着你 宠着你\u003cbr/\u003e现实\u003c/p\u003e\n","title":"一段旅程"},{"content":"---\r\n\r\n静谧夜空\u003cbr/\u003e\r\n冷冷的风\u003cbr/\u003e\r\n窗外无比美丽的\u003cbr/\u003e\r\n城市灯火\u003cbr/\u003e\r\n想想你\u003cbr/\u003e\r\n想想我\u003cbr/\u003e\r\n不由莞尔一笑\u003cbr/\u003e\r\n或许\u003cbr/\u003e\r\n这是最好的喜欢\u003cbr/\u003e\r\n一切 一切\u003cbr/\u003e\r\n情绪波动\u003cbr/\u003e\r\n变得静如止水\u003cbr/\u003e\r\n爱你\u003cbr/\u003e","cover":"","link":"心静.html","preview":"\u003cp\u003e静谧夜空\u003cbr\u003e  冷冷的风\u003cbr\u003e  窗外无比美丽的\u003cbr\u003e  城市灯火\u003c/p\u003e\n","title":"心静"},{"content":"---\r\n\r\n概念：\r\n\r\nVO（View Object）：视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。\r\n\r\nDTO（Data Transfer Object）：数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。\r\n\r\nDO（Domain Object）：领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。\r\n\r\nPO（Persistent Object）：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。\r\n\r\n##### VO与DTO的区别\r\n\r\n大家可能会有个疑问（在笔者参与的项目中，很多程序员也有相同的疑惑）：既然DTO是展示层与服务层之间传递数据的对象，为什么还需要一个VO呢？对！对于绝大部分的应用场景来说，DTO和VO的属性值基本是一致的，而且他们通常都是POJO，因此没必要多此一举，但不要忘记这是实现层面的思维，对于设计层面来说，概念上还是应该存在VO和DTO，因为两者有着本质的区别，DTO代表服务层需要接收的数据和返回的数据，而VO代表展示层需要显示的数据。\r\n\r\n用一个例子来说明可能会比较容易理解：例如服务层有一个getUser的方法返回一个系统用户，其中有一个属性是gender(性别)，对于服务层来说，它只从语义上定义：1-男性，2-女性，0-未指定，而对于展示层来说，它可能需要用“帅哥”代表男性，用“美女”代表女性，用“秘密”代表未指定。说到这里，可能你还会反驳，在服务层直接就返回“帅哥美女”不就行了吗？对于大部分应用来说，这不是问题，但设想一下，如果需求允许客户可以定制风格，而不同风格对于“性别”的表现方式不一样，又或者这个服务同时供多个客户端使用（不同门户），而不同的客户端对于表现层的要求有所不同，那么，问题就来了。再者，回到设计层面上分析，从职责单一原则来看，服务层只负责业务，与具体的表现形式无关，因此，它返回的DTO，不应该出现与表现形式的耦合。\r\n\r\n理论归理论，这到底还是分析设计层面的思维，是否在实现层面必须这样做呢？一刀切的做法往往会得不偿失，下面我马上会分析应用中如何做出正确的选择。\r\n\r\n##### VO与DTO的应用\r\n\r\n上面只是用了一个简单的例子来说明VO与DTO在概念上的区别，本节将会告诉你如何在应用中做出正确的选择。\r\n\r\n在以下才场景中，我们可以考虑把VO与DTO二合为一（注意：是实现层面）：\r\n\r\n当需求非常清晰稳定，而且客户端很明确只有一个的时候，没有必要把VO和DTO区分开来，这时候VO可以退隐，用一个DTO即可，为什么是VO退隐而不是DTO？回到设计层面，服务层的职责依然不应该与展示层耦合，所以，对于前面的例子，你很容易理解，DTO对于“性别”来说，依然不能用“帅哥美女”，这个转换应该依赖于页面的脚本（如JavaScript）或其他机制（JSTL、EL、CSS）\r\n\r\n即使客户端可以进行定制，或者存在多个不同的客户端，如果客户端能够用某种技术（脚本或其他机制）实现转换，同样可以让VO退隐\r\n\r\n以下场景需要优先考虑VO、DTO并存：\r\n\r\n上述场景的反面场景\r\n\r\n因为某种技术原因，比如某个框架（如Flex）提供自动把POJO转换为UI中某些Field时，可以考虑在实现层面定义出VO，这个权衡完全取决于使用框架的自动转换能力带来的开发和维护效率提升与设计多一个VO所多做的事情带来的开发和维护效率的下降之间的比对。\r\n\r\n如果页面出现一个“大视图”，而组成这个大视图的所有数据需要调用多个服务，返回多个DTO来组装（当然，这同样可以通过服务层提供一次性返回一个大视图的DTO来取代，但在服务层提供一个这样的方法是否合适，需要在设计层面进行权衡）。\r\n\r\n##### DTO与DO的区别\r\n\r\n首先是概念上的区别，DTO是展示层和服务层之间的数据传输对象（可以认为是两者之间的协议），而DO是对现实世界各种业务角色的抽象，这就引出了两者在数据上的区别，例如UserInfo和User（对于DTO和DO的命名规则，请参见笔者前面的一篇博文），对于一个getUser方法来说，本质上它永远不应该返回用户的密码，因此UserInfo至少比User少一个password的数据。而在领域驱动设计中，正如第一篇系列文章所说，DO不是简单的POJO，它具有领域业务逻辑。\r\n\r\n##### DTO与DO的应用\r\n\r\n从上一节的例子中，细心的读者可能会发现问题：既然getUser方法返回的UserInfo不应该包含password，那么就不应该存在password这个属性定义，但如果同时有一个createUser的方法，传入的UserInfo需要包含用户的password，怎么办？在设计层面，展示层向服务层传递的DTO与服务层返回给展示层的DTO在概念上是不同的，但在实现层面，我们通常很少会这样做（定义两个UserInfo，甚至更多），因为这样做并不见得很明智，我们完全可以设计一个完全兼容的DTO，在服务层接收数据的时候，不该由展示层设置的属性（如订单的总价应该由其单价、数量、折扣等决定），无论展示层是否设置，服务层都一概忽略，而在服务层返回数据时，不该返回的数据（如用户密码），就不设置对应的属性。\r\n\r\n对于DO来说，还有一点需要说明：为什么不在服务层中直接返回DO呢？这样可以省去DTO的编码和转换工作，原因如下：\r\n\r\n两者在本质上的区别可能导致彼此并不一一对应，一个DTO可能对应多个DO，反之亦然，甚至两者存在多对多的关系。\r\n\r\nDO具有一些不应该让展示层知道的数据\r\n\r\nDO具有业务方法，如果直接把DO传递给展示层，展示层的代码就可以绕过服务层直接调用它不应该访问的操作，对于基于AOP拦截服务层来进行访问控制的机制来说，这问题尤为突出，而在展示层调用DO的业务方法也会因为事务的问题，让事务难以控制。\r\n\r\n对于某些ORM框架（如Hibernate）来说，通常会使用“延迟加载”技术，如果直接把DO暴露给展示层，对于大部分情况，展示层不在事务范围之内（Open session in view在大部分情况下不是一种值得推崇的设计），如果其尝试在Session关闭的情况下获取一个未加载的关联对象，会出现运行时异常（对于Hibernate来说，就是LazyInitiliaztionException）。\r\n\r\n从设计层面来说，展示层依赖于服务层，服务层依赖于领域层，如果把DO暴露出去，就会导致展示层直接依赖于领域层，这虽然依然是单向依赖，但这种跨层依赖会导致不必要的耦合。\r\n\r\n对于DTO来说，也有一点必须进行说明，就是DTO应该是一个“扁平的二维对象”，举个例子来说明：如果User会关联若干个其他实体（例如Address、Account、Region等），那么getUser()返回的UserInfo，是否就需要把其关联的对象的DTO都一并返回呢？如果这样的话，必然导致数据传输量的大增，对于分布式应用来说，由于涉及数据在网络上的传输、序列化和反序列化，这种设计更不可接受。如果getUser除了要返回User的基本信息外，还需要返回一个AccountId、AccountName、RegionId、RegionName，那么，请把这些属性定义到UserInfo中，把一个“立体”的对象树“压扁”成一个“扁平的二维对象”，笔者目前参与的项目是一个分布式系统，该系统不管三七二十一，把一个对象的所有关联对象都转换为相同结构的DTO对象树并返回，导致性能非常的慢。\r\n\r\n##### DO与PO的区别\r\n\r\nDO和PO在绝大部分情况下是一一对应的，PO是只含有get/set方法的POJO，但某些场景还是能反映出两者在概念上存在本质的区别：\r\n\r\nDO在某些场景下不需要进行显式的持久化，例如利用策略模式设计的商品折扣策略，会衍生出折扣策略的接口和不同折扣策略实现类，这些折扣策略实现类可以算是DO，但它们只驻留在静态内存，不需要持久化到持久层，因此，这类DO是不存在对应的PO的。\r\n\r\n同样的道理，某些场景下，PO也没有对应的DO，例如老师Teacher和学生Student存在多对多的关系，在关系数据库中，这种关系需要表现为一个中间表，也就对应有一个TeacherAndStudentPO的PO，但这个PO在业务领域没有任何现实的意义，它完全不能与任何DO对应上。这里要特别声明，并不是所有多对多关系都没有业务含义，这跟具体业务场景有关，例如：两个PO之间的关系会影响具体业务，并且这种关系存在多种类型，那么这种多对多关系也应该表现为一个DO，又如：“角色”与“资源”之间存在多对多关系，而这种关系很明显会表现为一个DO——“权限”。\r\n\r\n某些情况下，为了某种持久化策略或者性能的考虑，一个PO可能对应多个DO，反之亦然。例如客户Customer有其联系信息Contacts，这里是两个一对一关系的DO，但可能出于性能的考虑（极端情况，权作举例），为了减少数据库的连接查询操作，把Customer和Contacts两个DO数据合并到一张数据表中。反过来，如果一本图书Book，有一个属性是封面cover，但该属性是一副图片的二进制数据，而某些查询操作不希望把cover一并加载，从而减轻磁盘IO开销，同时假设ORM框架不支持属性级别的延迟加载，那么就需要考虑把cover独立到一张数据表中去，这样就形成一个DO对应对个PO的情况。\r\n\r\nPO的某些属性值对于DO没有任何意义，这些属性值可能是为了解决某些持久化策略而存在的数据，例如为了实现“乐观锁”，PO存在一个version的属性，这个version对于DO来说是没有任何业务意义的，它不应该在DO中存在。同理，DO中也可能存在不需要持久化的属性。\r\n\r\n##### DO与PO的应用\r\n\r\n由于ORM框架的功能非常强大而大行其道，而且JavaEE也推出了JPA规范，现在的业务应用开发，基本上不需要区分DO与PO，PO完全可以通过JPA，Hibernate Annotations/hbm隐藏在DO之中。虽然如此，但有些问题我们还必须注意：\r\n\r\n对于DO中不需要持久化的属性，需要通过ORM显式的声明，如：在JPA中，可以利用@Transient声明。\r\n\r\n对于PO中为了某种持久化策略而存在的属性，例如version，由于DO、PO合并了，必须在DO中声明，但由于这个属性对DO是没有任何业务意义的，需要让该属性对外隐藏起来，最常见的做法是把该属性的get/set方法私有化，甚至不提供get/set方法，但对于Hibernate来说，这需要特别注意，由于Hibernate从数据库读取数据转换为DO时，是利用反射机制先调用DO的空参数构造函数构造DO实例，然后再利用JavaBean的规范反射出set方法来为每个属性设值，如果不显式声明set方法，或把set方法设置为private，都会导致Hibernate无法初始化DO，从而出现运行时异常，可行的做法是把属性的set方法设置为protected。\r\n\r\n对于一个DO对应多个PO，或者一个PO对应多个DO的场景，以及属性级别的延迟加载，Hibernate都提供了很好的支持，请参考Hibnate的相关资料。","cover":"","link":"entity.html","preview":"\u003cp\u003eVo、Dto、Do、Po四个对象，是开发中常用的对象，那么怎么正确使用呢？还得理解\u003c/p\u003e\n","title":"Vo、Dto、Do、Po概念以及区别与应用"},{"content":"---\r\n\r\n##### 同业客户\r\n\r\n同业客户就是其他银行及非银行金融机构\r\n\r\n##### 集团客户\r\n\r\n大型、特大型企业\r\n\r\n##### 授信\r\n\r\n授信：是指本行向客户直接提供资金支持，或对客户在有关经济活动中的信用向第三方作出保证的行为。 本行客户的授信包括表内外授信，表内授信包括贷款、贴现、透支、贸易融资、拆借和回购等；表外业务包括贷款承诺、保证、信用证、票据承兑、 保函等 \r\n\r\n##### 内部授信\r\n\r\n内部授信：是指确定的授信额度后，内部掌握，供客户申请信贷业务时参考、 控制，对外保密。 \r\n\r\n##### 公开授信\r\n\r\n公开授信：是指在内部控制线或额度内告诉客户部分授信额度。\r\n\r\n##### 综合授信\r\n\r\n综合授信：是指本行对单一客户确定的内部控制最高综合授信额度，包括贷款、 项目融资、贸易融资（如打包放款、进出口押汇）、贴现、透支、保理、拆借和回购等 表内授信，以及贷款承诺、保证（保函）、信用证、票据承兑等表外授信形式的本、外 币统一综合授信 \r\n\r\n##### 集团授信\r\n\r\n集团授信：是指本行对集团客户确定的内部控制的最高综合授信额度。\r\n\r\n##### 单一客户授信\r\n\r\n单一客户授信：是指本行对单一客户确定的内部控制最高综合授信额度\r\n\r\n##### 敞口额度\r\n\r\n敞口额度是企业实际可用于支付的信贷资金额度，银行账面贷款或承兑额度等于敞口额度与保证金额度之和。 企业的贷款额度也叫综合授信额度，还叫敞口额度。\r\n\r\n##### 名义金额\r\n\r\n名义金额含义：公允价值无法确定，这个经济事项又确实存在，给它一个金额,让帐上有体现，不然易疏漏，让资产流失。\r\n\r\n##### 三个办法一个指引\r\n\r\n三法是指：《固定资产贷款管理暂行办法》、《流动资金贷款管理暂行办法》和《个人贷款管理暂行办法》三种管理暂行办法。 一指引是指：《项目融资业务指引》。\r\n\r\n##### 资产保全\r\n\r\n资产保全是指维护资产的完整，防止流失而采取的一系列措施,包括查封、冻结等。\r\n\r\n##### 管户权\r\n\r\n管户权：是指在客户第一次与银行合作办理担保业务，且有实际的业务关系时，在银行业务系统中生成记录，管户权是其中一项，管户权默认为办理此项业务的所属银行。\r\n\r\n##### 一般重组\r\n\r\n一般重组是指同一控制下的企业合并产生的企业会计处理办法与税收规定不一致应进行纳税调整的金额","cover":"","link":"jinrong.html","preview":"\u003cp\u003e金融相关名词解释，开发需要\u003c/p\u003e\n","title":"金融名词解释"},{"content":"---\r\n\r\n##### 主题操作\r\n\r\nEnter = 换行\r\n\r\nTab = 缩进一级\r\n\r\nShift + Tab = 提升一级\r\n\r\nShift + Enter = 添加主题备注\r\n\r\nCommand + ] = 进入下一主题\r\n\r\nCommand + [ = 返回上一主题\r\n\r\nCommand + . = 展开/收缩主题\r\n\r\nCommand + Enter = 完成状态/恢复编辑\r\n\r\nCommand + Shift + Delete = 删除主题\r\n\r\nCommand + Shift +↑= 主题上移\r\n\r\nCommand + Shift +↓= 主题下移\r\n\r\n##### 文本操作\r\n\r\nCommand + C = 复制\r\n\r\nCommand + V = 粘贴\r\n\r\nCommand + X = 剪切\r\n\r\nCommand + Z = 撤消\r\n\r\nCommand + U = 下划线\r\n\r\nCommand + I = 斜体\r\n\r\nCommand + B = 加粗\r\n\r\nCommand + A =全选\r\n\r\n##### 高级进阶\r\n\r\n空格@，标签  \r\n\r\n空格# ，标签\r\n\r\nAlt + Enter = 添加图片\r\n\r\nAlt +  D、R、Y、G、B、P = 主题颜色控制\r\n\r\nAlt +  1、2、3、4= 主题等级\r\n\r\nEnter + ? = 快捷键目录\r\n\r\nShift + 点击 = 多选\r\n\r\nShift + F = 搜索\r\n\r\n输入链接 = 直达  [www.hongrendd.com](http://www.hongrendd.com)\r\n\r\nCommand + N = 新建主题\r\n\r\nCommand + J  = 新建文件夹\r\n\r\n来自幕布技术支持，Yannberg的大脑共享\r\n\r\n应用场景\r\n\r\n会议记录\r\n\r\n思维整理\r\n\r\n项目管理\r\n\r\n读书笔记 \r\n\r\n撰写方案\r\n\r\n脑力分享\r\n\r\n流程推进","cover":"","link":"mubu.html","preview":"\u003cp\u003e幕布使用指南\u003c/p\u003e\n","title":"MUBU快捷使用指南"}]